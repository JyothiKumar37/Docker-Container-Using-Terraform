Script started on 2025-09-25 11:05:34+05:30 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="150" LINES="35"]
(base) ]0;rgukt@rgukt-Lenovo-E41-55: ~/Desktop/sessions/project/docker[01;32mrgukt@rgukt-Lenovo-E41-55[00m:[01;34m~/Desktop/sessions/project/docker[00m$ terraform init
[0m[1mInitializing the backend...[0m
[0m[1mInitializing provider plugins...[0m
- Reusing previous version of kreuzwerker/docker from the dependency lock file
- Using previously-installed kreuzwerker/docker v3.6.2

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
(base) ]0;rgukt@rgukt-Lenovo-E41-55: ~/Desktop/sessions/project/docker[01;32mrgukt@rgukt-Lenovo-E41-55[00m:[01;34m~/Desktop/sessions/project/docker[00m$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # docker_container.nginx[0m will be created
[0m  [32m+[0m[0m resource "docker_container" "nginx" {
      [32m+[0m[0m attach                                      = false
      [32m+[0m[0m bridge                                      = (known after apply)
      [32m+[0m[0m command                                     = (known after apply)
      [32m+[0m[0m container_logs                              = (known after apply)
      [32m+[0m[0m container_read_refresh_timeout_milliseconds = 15000
      [32m+[0m[0m entrypoint                                  = (known after apply)
      [32m+[0m[0m env                                         = (known after apply)
      [32m+[0m[0m exit_code                                   = (known after apply)
      [32m+[0m[0m hostname                                    = (known after apply)
      [32m+[0m[0m id                                          = (known after apply)
      [32m+[0m[0m image                                       = (known after apply)
      [32m+[0m[0m init                                        = (known after apply)
      [32m+[0m[0m ipc_mode                                    = (known after apply)
      [32m+[0m[0m log_driver                                  = (known after apply)
      [32m+[0m[0m logs                                        = false
      [32m+[0m[0m must_run                                    = true
      [32m+[0m[0m name                                        = "nginx_container"
      [32m+[0m[0m network_data                                = (known after apply)
      [32m+[0m[0m network_mode                                = "bridge"
      [32m+[0m[0m read_only                                   = false
      [32m+[0m[0m remove_volumes                              = true
      [32m+[0m[0m restart                                     = "no"
      [32m+[0m[0m rm                                          = false
      [32m+[0m[0m runtime                                     = (known after apply)
      [32m+[0m[0m security_opts                               = (known after apply)
      [32m+[0m[0m shm_size                                    = (known after apply)
      [32m+[0m[0m start                                       = true
      [32m+[0m[0m stdin_open                                  = false
      [32m+[0m[0m stop_signal                                 = (known after apply)
      [32m+[0m[0m stop_timeout                                = (known after apply)
      [32m+[0m[0m tty                                         = false
      [32m+[0m[0m wait                                        = false
      [32m+[0m[0m wait_timeout                                = 60

      [32m+[0m[0m healthcheck (known after apply)

      [32m+[0m[0m labels (known after apply)

      [32m+[0m[0m ports {
          [32m+[0m[0m external = 80
          [32m+[0m[0m internal = 80
          [32m+[0m[0m ip       = "0.0.0.0"
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # docker_image.nginx[0m will be created
[0m  [32m+[0m[0m resource "docker_image" "nginx" {
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m image_id     = (known after apply)
      [32m+[0m[0m keep_locally = false
      [32m+[0m[0m name         = "nginx:latest"
      [32m+[0m[0m repo_digest  = (known after apply)
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
(base) ]0;rgukt@rgukt-Lenovo-E41-55: ~/Desktop/sessions/project/docker[01;32mrgukt@rgukt-Lenovo-E41-55[00m:[01;34m~/Desktop/sessions/project/docker[00m$ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # docker_container.nginx[0m will be created
[0m  [32m+[0m[0m resource "docker_container" "nginx" {
      [32m+[0m[0m attach                                      = false
      [32m+[0m[0m bridge                                      = (known after apply)
      [32m+[0m[0m command                                     = (known after apply)
      [32m+[0m[0m container_logs                              = (known after apply)
      [32m+[0m[0m container_read_refresh_timeout_milliseconds = 15000
      [32m+[0m[0m entrypoint                                  = (known after apply)
      [32m+[0m[0m env                                         = (known after apply)
      [32m+[0m[0m exit_code                                   = (known after apply)
      [32m+[0m[0m hostname                                    = (known after apply)
      [32m+[0m[0m id                                          = (known after apply)
      [32m+[0m[0m image                                       = (known after apply)
      [32m+[0m[0m init                                        = (known after apply)
      [32m+[0m[0m ipc_mode                                    = (known after apply)
      [32m+[0m[0m log_driver                                  = (known after apply)
      [32m+[0m[0m logs                                        = false
      [32m+[0m[0m must_run                                    = true
      [32m+[0m[0m name                                        = "nginx_container"
      [32m+[0m[0m network_data                                = (known after apply)
      [32m+[0m[0m network_mode                                = "bridge"
      [32m+[0m[0m read_only                                   = false
      [32m+[0m[0m remove_volumes                              = true
      [32m+[0m[0m restart                                     = "no"
      [32m+[0m[0m rm                                          = false
      [32m+[0m[0m runtime                                     = (known after apply)
      [32m+[0m[0m security_opts                               = (known after apply)
      [32m+[0m[0m shm_size                                    = (known after apply)
      [32m+[0m[0m start                                       = true
      [32m+[0m[0m stdin_open                                  = false
      [32m+[0m[0m stop_signal                                 = (known after apply)
      [32m+[0m[0m stop_timeout                                = (known after apply)
      [32m+[0m[0m tty                                         = false
      [32m+[0m[0m wait                                        = false
      [32m+[0m[0m wait_timeout                                = 60

      [32m+[0m[0m healthcheck (known after apply)

      [32m+[0m[0m labels (known after apply)

      [32m+[0m[0m ports {
          [32m+[0m[0m external = 80
          [32m+[0m[0m internal = 80
          [32m+[0m[0m ip       = "0.0.0.0"
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # docker_image.nginx[0m will be created
[0m  [32m+[0m[0m resource "docker_image" "nginx" {
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m image_id     = (known after apply)
      [32m+[0m[0m keep_locally = false
      [32m+[0m[0m name         = "nginx:latest"
      [32m+[0m[0m repo_digest  = (known after apply)
    }

[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.
[0m[0m[1mdocker_image.nginx: Creating...[0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m10s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m20s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m30s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m40s elapsed][0m[0m
[0m[1mdocker_image.nginx: Still creating... [00m50s elapsed][0m[0m
[0m[1mdocker_image.nginx: Creation complete after 50s [id=sha256:41f689c209100e6cadf3ce7fdd02035e90dbd1d586716bf8fc6ea55c365b2d81nginx:latest][0m
[0m[1mdocker_container.nginx: Creating...[0m[0m
[0m[1mdocker_container.nginx: Creation complete after 4s [id=eebff175313091b0006e66fe49cfdbeb0e9d8f76f027b0b89384f42dd980d69a][0m
[0m[1m[32m
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
[0m(base) ]0;rgukt@rgukt-Lenovo-E41-55: ~/Desktop/sessions/project/docker[01;32mrgukt@rgukt-Lenovo-E41-55[00m:[01;34m~/Desktop/sessions/project/docker[00m$ sudo docker ps
[sudo] password for rgukt: 
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                NAMES
eebff1753130   41f689c20910   "/docker-entrypoint.â€¦"   38 seconds ago   Up 33 seconds   0.0.0.0:80->80/tcp   nginx_container
(base) ]0;rgukt@rgukt-Lenovo-E41-55: ~/Desktop/sessions/project/docker[01;32mrgukt@rgukt-Lenovo-E41-55[00m:[01;34m~/Desktop/sessions/project/docker[00m$ terrafprm [K[K[K[Korm statelist
Terraform has no command named "statelist". Did you mean "state list"?

To see all of Terraform's top-level commands, run:
  terraform -help

(base) ]0;rgukt@rgukt-Lenovo-E41-55: ~/Desktop/sessions/project/docker[01;32mrgukt@rgukt-Lenovo-E41-55[00m:[01;34m~/Desktop/sessions/project/docker[00m$ terraform statelist list
docker_container.nginx
docker_image.nginx
(base) ]0;rgukt@rgukt-Lenovo-E41-55: ~/Desktop/sessions/project/docker[01;32mrgukt@rgukt-Lenovo-E41-55[00m:[01;34m~/Desktop/sessions/project/docker[00m$ terraform destroy -auto-approve
[0m[1mdocker_image.nginx: Refreshing state... [id=sha256:41f689c209100e6cadf3ce7fdd02035e90dbd1d586716bf8fc6ea55c365b2d81nginx:latest][0m
[0m[1mdocker_container.nginx: Refreshing state... [id=eebff175313091b0006e66fe49cfdbeb0e9d8f76f027b0b89384f42dd980d69a][0m

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  [31m-[0m destroy[0m

Terraform will perform the following actions:

[1m  # docker_container.nginx[0m will be [1m[31mdestroyed[0m
[0m  [31m-[0m[0m resource "docker_container" "nginx" {
      [31m-[0m[0m attach                                      = false [90m-> null[0m[0m
      [31m-[0m[0m command                                     = [
          [31m-[0m[0m "nginx",
          [31m-[0m[0m "-g",
          [31m-[0m[0m "daemon off;",
        ] [90m-> null[0m[0m
      [31m-[0m[0m container_read_refresh_timeout_milliseconds = 15000 [90m-> null[0m[0m
      [31m-[0m[0m cpu_shares                                  = 0 [90m-> null[0m[0m
      [31m-[0m[0m dns                                         = [] [90m-> null[0m[0m
      [31m-[0m[0m dns_opts                                    = [] [90m-> null[0m[0m
      [31m-[0m[0m dns_search                                  = [] [90m-> null[0m[0m
      [31m-[0m[0m entrypoint                                  = [
          [31m-[0m[0m "/docker-entrypoint.sh",
        ] [90m-> null[0m[0m
      [31m-[0m[0m env                                         = [] [90m-> null[0m[0m
      [31m-[0m[0m group_add                                   = [] [90m-> null[0m[0m
      [31m-[0m[0m hostname                                    = "eebff1753130" [90m-> null[0m[0m
      [31m-[0m[0m id                                          = "eebff175313091b0006e66fe49cfdbeb0e9d8f76f027b0b89384f42dd980d69a" [90m-> null[0m[0m
      [31m-[0m[0m image                                       = "sha256:41f689c209100e6cadf3ce7fdd02035e90dbd1d586716bf8fc6ea55c365b2d81" [90m-> null[0m[0m
      [31m-[0m[0m init                                        = false [90m-> null[0m[0m
      [31m-[0m[0m ipc_mode                                    = "private" [90m-> null[0m[0m
      [31m-[0m[0m log_driver                                  = "json-file" [90m-> null[0m[0m
      [31m-[0m[0m log_opts                                    = {} [90m-> null[0m[0m
      [31m-[0m[0m logs                                        = false [90m-> null[0m[0m
      [31m-[0m[0m max_retry_count                             = 0 [90m-> null[0m[0m
      [31m-[0m[0m memory                                      = 0 [90m-> null[0m[0m
      [31m-[0m[0m memory_swap                                 = 0 [90m-> null[0m[0m
      [31m-[0m[0m must_run                                    = true [90m-> null[0m[0m
      [31m-[0m[0m name                                        = "nginx_container" [90m-> null[0m[0m
      [31m-[0m[0m network_data                                = [
          [31m-[0m[0m {
              [31m-[0m[0m gateway                   = "172.17.0.1"
              [31m-[0m[0m global_ipv6_prefix_length = 0
              [31m-[0m[0m ip_address                = "172.17.0.2"
              [31m-[0m[0m ip_prefix_length          = 16
              [31m-[0m[0m mac_address               = "02:42:ac:11:00:02"
              [31m-[0m[0m network_name              = "bridge"
                [90m# (2 unchanged attributes hidden)[0m[0m
            },
        ] [90m-> null[0m[0m
      [31m-[0m[0m network_mode                                = "bridge" [90m-> null[0m[0m
      [31m-[0m[0m privileged                                  = false [90m-> null[0m[0m
      [31m-[0m[0m publish_all_ports                           = false [90m-> null[0m[0m
      [31m-[0m[0m read_only                                   = false [90m-> null[0m[0m
      [31m-[0m[0m remove_volumes                              = true [90m-> null[0m[0m
      [31m-[0m[0m restart                                     = "no" [90m-> null[0m[0m
      [31m-[0m[0m rm                                          = false [90m-> null[0m[0m
      [31m-[0m[0m runtime                                     = "runc" [90m-> null[0m[0m
      [31m-[0m[0m security_opts                               = [] [90m-> null[0m[0m
      [31m-[0m[0m shm_size                                    = 64 [90m-> null[0m[0m
      [31m-[0m[0m start                                       = true [90m-> null[0m[0m
      [31m-[0m[0m stdin_open                                  = false [90m-> null[0m[0m
      [31m-[0m[0m stop_signal                                 = "SIGQUIT" [90m-> null[0m[0m
      [31m-[0m[0m stop_timeout                                = 0 [90m-> null[0m[0m
      [31m-[0m[0m storage_opts                                = {} [90m-> null[0m[0m
      [31m-[0m[0m sysctls                                     = {} [90m-> null[0m[0m
      [31m-[0m[0m tmpfs                                       = {} [90m-> null[0m[0m
      [31m-[0m[0m tty                                         = false [90m-> null[0m[0m
      [31m-[0m[0m wait                                        = false [90m-> null[0m[0m
      [31m-[0m[0m wait_timeout                                = 60 [90m-> null[0m[0m
        [90m# (7 unchanged attributes hidden)[0m[0m

      [31m-[0m[0m ports {
          [31m-[0m[0m external = 80 [90m-> null[0m[0m
          [31m-[0m[0m internal = 80 [90m-> null[0m[0m
          [31m-[0m[0m ip       = "0.0.0.0" [90m-> null[0m[0m
          [31m-[0m[0m protocol = "tcp" [90m-> null[0m[0m
        }
    }

[1m  # docker_image.nginx[0m will be [1m[31mdestroyed[0m
[0m  [31m-[0m[0m resource "docker_image" "nginx" {
      [31m-[0m[0m id           = "sha256:41f689c209100e6cadf3ce7fdd02035e90dbd1d586716bf8fc6ea55c365b2d81nginx:latest" [90m-> null[0m[0m
      [31m-[0m[0m image_id     = "sha256:41f689c209100e6cadf3ce7fdd02035e90dbd1d586716bf8fc6ea55c365b2d81" [90m-> null[0m[0m
      [31m-[0m[0m keep_locally = false [90m-> null[0m[0m
      [31m-[0m[0m name         = "nginx:latest" [90m-> null[0m[0m
      [31m-[0m[0m repo_digest  = "nginx@sha256:d5f28ef21aabddd098f3dbc21fe5b7a7d7a184720bc07da0b6c9b9820e97f25e" [90m-> null[0m[0m
    }

[1mPlan:[0m 0 to add, 0 to change, 2 to destroy.
[0m[0m[1mdocker_container.nginx: Destroying... [id=eebff175313091b0006e66fe49cfdbeb0e9d8f76f027b0b89384f42dd980d69a][0m[0m
[0m[1mdocker_container.nginx: Destruction complete after 3s[0m
[0m[1mdocker_image.nginx: Destroying... [id=sha256:41f689c209100e6cadf3ce7fdd02035e90dbd1d586716bf8fc6ea55c365b2d81nginx:latest][0m[0m
[0m[1mdocker_image.nginx: Destruction complete after 0s[0m
[0m[1m[32m
Destroy complete! Resources: 2 destroyed.
[0m(base) ]0;rgukt@rgukt-Lenovo-E41-55: ~/Desktop/sessions/project/docker[01;32mrgukt@rgukt-Lenovo-E41-55[00m:[01;34m~/Desktop/sessions/project/docker[00m$ exit
exit

Script done on 2025-09-25 11:09:24+05:30 [COMMAND_EXIT_CODE="0"]
